if !has('gui_running')
  finish
endif

" General Settings
" {{{

  set nomousehide

  " disable bash prompt
  let $PROMPT_COMMAND=""

  " selection behaviour
  set selectmode=key
  set selection=inclusive
  set keymodel=startsel
  set mousemodel=extend

" }}}

" Display Settings
" {{{

  " interface
  set guioptions=aigrLM
  set visualbell t_vb= " disable bells, reset when starting GUI

  " don't use autoselect on OS X
  if has('mac')
    set guioptions-=a
  endif

  if !exists('s:gui_loaded')
    let s:gui_loaded = 1

    set lines=60
    if &diff
      set columns=200
    else
      set columns=120
    end

    " font
    if has('mac')
      set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h13
    elseif has('unix')
      if hostname() == 'fnord'
        set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 10
      else
        set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 9
      endif
    else
      set guifont=DejaVu_Sans_Mono_for_Powerline:h9:cANSI
    endif
  endif

" }}}

" Keybindings
" {{{

  " Ctrl+PageUp/PageDown - toggle font size
  function! ToggleFontSize()
    if exists('s:toggle_font_size')
      let s:toggle_font_size_big = [ &guifont, &columns, &lines ]

      execute 'set guifont=' . escape(s:toggle_font_size[0], ' ')
      execute 'set columns=' . escape(s:toggle_font_size[1], ' ')
      execute 'set lines='   . escape(s:toggle_font_size[2], ' ')

      unlet s:toggle_font_size
    else
      let s:toggle_font_size = [ &guifont, &columns, &lines ]

      if exists('s:toggle_font_size_big')
        execute 'set guifont=' . escape(s:toggle_font_size_big[0], ' ')
        execute 'set columns=' . escape(s:toggle_font_size_big[1], ' ')
        execute 'set lines='   . escape(s:toggle_font_size_big[2], ' ')

        unlet s:toggle_font_size_big
      else
        let l:font = substitute(&guifont, '[ :]h*\d.*', '', '')

        if has('mac')
          let &guifont = l:font.':h18'
        elseif has('unix')
          let &guifont = l:font.' 18'
        else
          let &guifont = l:font.'h16:cANSI'
        endif

        set columns=110 lines=40
      endif

      winpos 290 100
    endif
    wincmd =
  endfunction

  noremap <silent> <C-PageUp> :call ToggleFontSize()<CR>
  noremap <silent> <C-PageDown> :call ToggleFontSize()<CR>
  inoremap <silent> <C-PageUp> <C-O>:call ToggleFontSize()<CR>
  inoremap <silent> <C-PageDown> <C-O>:call ToggleFontSize()<CR>

  " don't use Alt for menus
  set winaltkeys=no

  " Copy & Paste shortcuts
  if has('mac')
    vnoremap <D-x> "+x
    " Command-c is Copy
    vnoremap <D-c> "+y
    " Command-v is Paste
    map <D-v>               "+gP
    cmap <D-v>              <C-R>+

    " Pasting blockwise and linewise selections is not possible in Insert and
    " Visual mode without the +virtualedit feature.  They are pasted as if they
    " were characterwise instead.
    " Uses the paste.vim autoload script.

    exe 'inoremap <script> <D-v>' paste#paste_cmd['i']
    exe 'vnoremap <script> <D-v>' paste#paste_cmd['v']
  else
    " CTRL-x is Cut
    vnoremap <C-x> "+x
    " CTRL-c is Copy
    vnoremap <C-c> "+y
    " CTRL-v is Paste
    noremap <C-v>               "+gP
    cnoremap <C-v>              <C-r>+

    " Pasting blockwise and linewise selections is not possible in Insert and
    " Visual mode without the +virtualedit feature.  They are pasted as if they
    " were characterwise instead.
    " Uses the paste.vim autoload script.

    exe 'inoremap <script> <C-v>' paste#paste_cmd['i']
    exe 'vnoremap <script> <C-v>' paste#paste_cmd['v']

    " Use <C-q> to do what CTRL-V used to do
    noremap <C-q> <C-v>
    inoremap <C-q> <C-v>
    cnoremap <C-q> <C-v>
  end

  " For CTRL-v to work autoselect must be off.
  " On Unix we have two selections, autoselect can be used.
  if !has('unix')
    set guioptions-=a
  endif

  " CTRL-a is Visual-select all
  "noremap <C-a> ggVG
  "vnoremap <C-a> <C-C>ggVG

" }}}
