#!/usr/bin/ruby

require 'fileutils'

TMPDIR = `mktemp -d /tmp/screener.XXXXXX`.strip

$info = :full

$files = []
$screens = 18
$columns = 3
$width = 360

$bg = '#eeeeee'
$fg = '#666666'
$border = '#666666'

def usage
  puts "Usage: #{File.basename $0} [options] FILE..."
  puts
  puts "  -s              only add filename"
  puts "  -q              don't add any file information"
  puts
  puts "  -n SCREENS      specify total number of screenshots (default: #$screens)"
  puts "  -c COLUMNS      specify number of columns (default: #$columns)"
  puts "  -w WIDTH        scale screenshots to this width (default: #$width)"
  puts
  puts "  -bg COLOR       set background color (default: #$bg)"
  puts "  -fg COLOR       set foreground color (default: #$fg)"
  puts "  -border COLOR   set border color (default: #$border)"
  puts
  exit 255
end

while arg = ARGV.shift
  case arg
    when '-s': $info = :short
    when '-q': $info = :disabled
    when '-n': $screens = ARGV.shift.to_i rescue usage
    when '-c': $columns = ARGV.shift.to_i rescue usage
    when '-w': $width = ARGV.shift.to_i rescue usage
    when '-bg': $bg = ARGV.shift or usage
    when '-fg': $fg = ARGV.shift or usage
    when '-border': $border = ARGV.shift or usage
    when /^-/: usage
    else
      if File.file? arg
        $files << arg
      else
        puts "File not found: #{arg}"
        exit 1
      end
  end
end

if $files.empty?
  usage
else
  montage = File.basename($files.first).sub(/\.[^.]*$/, '.jpg')
end

begin
  infos = {
    :files => [],
    :resolution => [],
    :size => 0,
    :duration => 0,
  }

  created = 0
  screens_per_file = [ 1, ($screens / $files.length.to_f).round ].max

  puts "\nCreating #$screens screenshots#{$files.length > 1 ? " (#{$files.length} files)" : ""}:"
  $files.each do |file|
    print "  #{File.basename file}: "
    info = `mplayer -noconfig all -frames 0 -vo null -ao null -identify "#{file}" 2>/dev/null`

    if info.match(/^ID_LENGTH=(.*)/)
      length = $1.to_i
    else
      puts "couldn't identify"
      next
    end

    width = $1.to_i if info.match(/^ID_VIDEO_WIDTH=(.*)$/)
    height = $1.to_i if info.match(/^ID_VIDEO_HEIGHT=(.*)$/)
    aspect = $1.to_f if info.match(/^ID_VIDEO_ASPECT=(.*)$/)

    if aspect and aspect > 0
      width = (height * aspect).round
    end

    infos[:files] << File.basename(file)
    infos[:size] += File.size(file)
    infos[:resolution] << "#{width}x#{height}"
    infos[:duration] += length

    step = ((length - 150) / (screens_per_file + 1).to_f).floor
    position = step

    screens_per_file.times do |i|
      print "."
      system("mplayer -noconfig all -nosound -vo png:z=0:outdir=#{TMPDIR} -vf scale=#{$width}:-2 -ss #{position} -frames 1 \"#{file}\" &>/dev/null")

      screen = "#{TMPDIR}/00000001.png"
      if File.file? screen
        print "."
        FileUtils.move(screen, sprintf("#{TMPDIR}/screen_%05d.png", created + 1))
        created += 1
        break if created >= $screens
      else
        print "\n    couldn't create screenshot at position #{position}/#{length}"
      end

      position += step
    end

    print "\n"
  end

  unless created.zero?
    rows = (created / $columns.to_f).ceil
    puts "Creating montage (#{$columns} columns, #{rows} rows):"
    print "  #{montage}: "

    args = [
      '',
      infos[:files].join(', '),
      (infos[:size] / 1024 / 1024).round,
      '',
      infos[:resolution].uniq.join(', '),
      infos[:duration] / 3600,
      infos[:duration] % 3600 / 60,
      infos[:duration] % 3600 % 60,
    ]

    if $files.length > 1
      args[0] = 's'
      args[3] = '(total)'
    end

    system("montage -background '#$bg' -geometry +5+5 -shadow -bordercolor '#$border' -border 0.5 -tile #{$columns}x#{rows} #{TMPDIR}/screen_*.png #{TMPDIR}/montage.jpg")
    print "."

    if $info == :disabled
      FileUtils.move("#{TMPDIR}/montage.jpg", $montage)
    else
      if $info == :full
        height = 64
        info_text = sprintf([
          "File Name%s:    %s",
          "Size:             %d MB %s",
          "Resolution:   %s",
          "Duration:       %02d:%02d:%02d",
        ].join("\n"), *args)
      else
        height = 20
        info_text = args[1]
      end

      system("convert xc:'#$bg' -fill '#$fg' -resize #{$width * $columns}x#{height}! -gravity NorthWest -pointsize 13 -draw 'text 5, 5 \"#{info_text}\"' #{TMPDIR}/info.png")
      print "."
      system("convert -background '#$bg' -append #{TMPDIR}/info.png #{TMPDIR}/montage.jpg \"#{montage}\"")
      print "."
    end

    print "\n\n"
  end

ensure
  FileUtils.rm_rf(TMPDIR)
end
