if !has('gui_running')
  finish
endif

" General Settings
" {{{

  set nomousehide

  " disable bash prompt
  let $PROMPT_COMMAND=""

  " selection behaviour
  set selectmode=key
  set selection=inclusive
  set keymodel=startsel
  set mousemodel=extend

" }}}

" Display Settings
" {{{

  set guioptions=aigrL

  " don't use autoselect on OS X
  if has('mac')
    set guioptions-=a
  endif

  if !exists('s:gui_loaded')
    let s:gui_loaded = 1

    set lines=60
    if &diff
      set columns=200
    else
      set columns=120
    end

    " font
    if has('mac')
      set guifont=Menlo\ Regular:h13
    elseif has('unix')
      "set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 10
      set guifont=Monospace\ 10
    else
      set guifont=DejaVu_Sans_Mono:h9:cANSI
    endif
  endif

  " tab bar
  hi TabLine guifg=LightGray guibg=#606060
  hi TabLineSel gui=bold guifg=White guibg=#808080
  hi TabLineFill gui=underline guifg=LightGray guibg=grey20 guibg=#505050

" }}}

" Keybindings
" {{{

  " ,Z - toggle font size
  function! ToggleFontSize()
    if exists('s:toggle_font_size')
      let s:toggle_font_size_big = [ &guifont, &columns, &lines ]

      execute 'set guifont=' . escape(s:toggle_font_size[0], ' ')
      execute 'set columns=' . escape(s:toggle_font_size[1], ' ')
      execute 'set lines='   . escape(s:toggle_font_size[2], ' ')

      unlet s:toggle_font_size
    else
      let s:toggle_font_size = [ &guifont, &columns, &lines ]

      if exists('s:toggle_font_size_big')
        execute 'set guifont=' . escape(s:toggle_font_size_big[0], ' ')
        execute 'set columns=' . escape(s:toggle_font_size_big[1], ' ')
        execute 'set lines='   . escape(s:toggle_font_size_big[2], ' ')

        unlet s:toggle_font_size_big
      else
        let l:font = substitute(&guifont, '[ :]h*\d.*', '', '')

        if has('mac')
          let &guifont = l:font.':h18'
        elseif has('unix')
          let &guifont = l:font.' 18'
        else
          let &guifont = l:font.'h16:cANSI'
        endif

        set columns=110 lines=40
      endif

      winpos 290 100
    endif
    wincmd =
  endfunction

  noremap <silent> <leader>Z :call ToggleFontSize()<CR>
  noremap <silent> <C-PageUp> :call ToggleFontSize()<CR>
  noremap <silent> <C-PageDown> :call ToggleFontSize()<CR>

  " cursor movements with Alt key in insert mode and console
  set winaltkeys=no
  inoremap <M-h> <C-o>h
  inoremap <M-j> <C-o>j
  inoremap <M-k> <C-o>k
  inoremap <M-l> <C-o>l

  cnoremap <M-h> <Left>
  cnoremap <M-l> <Right>
  cnoremap <M-j> <Down>
  cnoremap <M-k> <Up>

  inoremap <M-f> <C-o>e<Right>
  inoremap <M-b> <C-o>b
  inoremap <M-F> <C-o>E<Right>
  inoremap <M-B> <C-o>B

  cnoremap <M-f> <C-Right>
  cnoremap <M-b> <C-Left>

  " Copy & Paste shortcuts
  " set the 'cpoptions' to its Vim default
  if 1    " only do this when compiled with expression evaluation
    let s:save_cpo = &cpoptions
  endif
  set cpo&vim

  " CTRL-X is Cut
  vnoremap <C-X> "+x
  " CTRL-C is Copy
  vnoremap <C-C> "+y
  " CTRL-V is Paste
  map <C-V>               "+gP
  "cmap <C-V>              <C-R>+

  " Pasting blockwise and linewise selections is not possible in Insert and
  " Visual mode without the +virtualedit feature.  They are pasted as if they
  " were characterwise instead.
  " Uses the paste.vim autoload script.

  exe 'inoremap <script> <C-V>' paste#paste_cmd['i']
  exe 'vnoremap <script> <C-V>' paste#paste_cmd['v']

  " Use <C-Q> to do what CTRL-V used to do
  noremap <C-Q> <C-V>
  inoremap <C-Q> <C-V>
  cnoremap <C-Q> <C-V>

  " For CTRL-V to work autoselect must be off.
  " On Unix we have two selections, autoselect can be used.
  if !has('unix')
    set guioptions-=a
  endif

  " CTRL-A is Visual-select all
  noremap <C-A> ggVG
  vnoremap <C-A> <C-C>ggVG

  " restore 'cpoptions'
  set cpo&
  if 1
    let &cpoptions = s:save_cpo
    unlet s:save_cpo
  endif

" }}}
