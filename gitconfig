[user]
	name = Markus Koller
	email = markus-koller@gmx.ch

[core]
	eol = lf
	autocrlf = input
	excludesfile = ~/.gitexcludes

[url "git://github.com/"]
	insteadOf = gh:

[color]
	ui = auto

[advice]
	statusHints = false

[branch]
	autosetuprebase = remote

[diff]
	renames = copies
	mnemonicprefix = true

[difftool]
	prompt = false

[log]
	abbrevCommit = true
	decorate = true

[merge]
	stat = true
	tool = gvimdiff

[mergetool]
	prompt = false
	keepBackup = false

[push]
	default = matching

[rebase]
	stat = true

[alias]
	h = help
	r = remote
	br = branch
	sub = submodule

	shallow = clone --depth 1

	di = diff
	dc = diff --cached
	ds = diff --stat

	st = status
	stat = status
	ls = branch -av

	co = checkout
	sw = checkout
	ours = "!f() { git checkout --ours $@ && git add $@; }; f"
	theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

	unstage = reset HEAD
	all = add -A .
	ci = commit -v
	ca = commit -va
	amend = commit -v --amend

	l = log --all --graph --pretty=format:\"%C(yellow)[%h]%Creset %C(cyan)%an:%Creset %C(white)%s%Creset%C(green)%d%Creset %C(black bold)%ar%Creset\"
	lstat = log --stat
	ldiff = log -p

	up = pull -v --progress
	upbase = pull -v --progress --rebase
	upall = pull-all
	pu = push -v --progress
	ff = merge --ff-only HEAD@{u}
	mt = mergetool
	rup = remote update

	sts = stash save
	stp = stash pop
	std = stash drop
	stl = stash list

	g = "!f() { if [ \"`uname -s`\" = 'Darwin' ]; then (gitx $@ &>/dev/null &); elif [ -n \"$DISPLAY\" ]; then (gitg $@ &>/dev/null &); else tig $@; fi; }; f"
