#!/bin/bash

dir=`echo "$PWD" | sed -r "s|^$HOME|~|"`
unset files complete choice noedit

if [ "$1" = "--complete" ]; then
  complete=1
  noedit=1
  shift
fi

# cursor movement
SAVE=`echo -ne '\e[s'`
RESTORE=`echo -ne '\e[u'`
UP=`echo -ne '\e[1F'`
ERASE=`echo -ne '\e[2K'`
DOWN=`echo -ne '\e[1E'`
HIDE=`echo -ne '\e[?25l'`
SHOW=`echo -ne '\e[?25h'`

# colors
RESET=`echo -ne '\e[0m'`
WHITE=`echo -ne '\e[1;37m'`
RED=`echo -ne '\e[1;31m'`
GREEN=`echo -ne '\e[1;32m'`
YELLOW=`echo -ne '\e[1;33m'`
CYAN=`echo -ne '\e[1;36m'`

function sensible-echo {
  if [ -n "$complete" ]; then
    echo -ne "$@"
    local count=`echo -ne "$@" | wc -l`
    [ $count -eq 0 ] && echo -ne "$DOWN"
  else
    echo -e "$@"
  fi
}

if [[ "$1" =~ ^[0-9]+$ ]]; then
  if [ -n "$complete" ]; then
    # ignore numbers for completion, always show changed files
    shift
  else
    # otherwise use the number as the selected choice
    choice="$1"
    shift
  fi
fi

if [ $# -gt 0 ]; then
  # search for files matching the passed pattern

  pattern=`echo "$1" | sed -r 's|\.|.*|g' | sed -r 's|/|.*/|g'`

  if [[ "$pattern" =~ \#[0-9]+$ ]]; then
    choice=`echo "$pattern"  | sed -r 's/.*#([0-9]+)$/\1/'`
    pattern=`echo "$pattern" | sed -r 's/#[0-9]+$//'`
  fi

  files=`ag -l --ignore db/archive . | egrep "$pattern" | sort`
  display_files=`echo "$files" | sed -r "s|($pattern)|$RED\1$RESET|g"`
  count=`echo "$files" | grep -c .`

  if [ -n "$files" ]; then
    result=" $GREEN>$WHITE Found $YELLOW$count$WHITE matching files for $GREEN\"$1\"$WHITE in $CYAN[$dir]$RESET"
  else
    result=" $RED>$RESET No matches for $GREEN\"$1\"$RESET in $CYAN[$dir]$RESET"
    noedit=1
  fi
else
  # look for changed files
  display_files=`git -c color.ui=always status -s`
  files=`echo "$display_files" | awk '{ print $2 }'`
  count=`echo "$files" | grep -c .`

  if [ -z "$files" ]; then
    result=" $RED>$WHITE No changes in $CYAN[$dir]$RESET\n`git status | sed -r 's/^/    /'`"
    noedit=1
  else
    result=" $GREEN>$WHITE Found $YELLOW$count$WHITE changed files in $CYAN[$dir]$RESET"
  fi
fi

if [ -n "$choice" ]; then
  count=1
  files=`echo "$files" | head -n "$choice" | tail -1`
  display_files=`echo "$display_files" | head -n "$choice" | tail -1`
fi

if [ -z "$complete" ]; then
  if [ $count -eq 0 ]; then
    echo -e "$result"
  elif [ $count -eq 1 ]; then
    echo -e " $GREEN>$RESET Editing $WHITE$files$RESET"
    sensible-editor "$files"
  else
    if [ $count -gt 10 ]; then
      read -p " $CYAN>$WHITE Edit $YELLOW$count$WHITE files?$RESET [Y/n] "
      [ "$REPLY" = "n" -o "$REPLY" = "N" ] && exit
    fi
    sensible-editor $files
  fi
else
  columns=`tput cols`
  lines=`tput lines`
  limit=$((lines - 5))

  if [ $# -gt 0 -a $count -gt $limit ]; then
    display_files=`echo -e "$display_files" | head -n $limit`
    size=$((limit + 1))
  else
    size=$count
  fi

  let size+=2
  let size+=`echo -e "$result" | grep -c ^`

  display_files=`echo -e "$display_files" | sed -r -e "s/$/$RESET/" -e "s/^(.{$((columns-8))}).{8,}$/\1.../"`

  echo -ne "$SAVE"
  echo -ne "$HIDE"

  # restore on exit or interrupt
  trap "echo -ne \"$RESTORE\"" 0 1 2 3 9 15
  trap "echo -ne \"$SHOW\"" 0 1 2 3 9 15

  # erase everything except the current line
  while [ $lines -gt 0 ]; do
    let lines--

    echo -ne "$UP"
    echo -ne "$ERASE"
  done

  echo -ne "$RESTORE"
  # move up a line for each line to be displayed
  echo -ne "\033[${size}F"

  sensible-echo
  sensible-echo "$result"
  if [ $count -gt 0 ]; then
    sensible-echo "$display_files" | nl -s '  ' | sed -r "s/^ (\s*)([0-9]*)/\1$YELLOW[\2]$RESET/"
  fi

  if [ $count -gt $limit ]; then
    sensible-echo "           ($((count - limit)) more...)"
  fi

  echo -ne "$RESTORE"
fi
