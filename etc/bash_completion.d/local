# vim: ft=sh

complete -o bashdefault -o default -F _root_command sudo watch
complete -o bashdefault -o default -F _command start
complete -F _pgrep psgrep
complete -F _gem18 gem

# Debian completions
_packages_available() {
  COMPREPLY=( $(compgen -W "`apt-cache pkgnames ${COMP_WORDS[COMP_CWORD]} 2>/dev/null`") )
}
complete -F _packages_available pkget

_packages_installed() {
  COMPREPLY=( $(compgen -W "`dglob ${COMP_WORDS[COMP_CWORD]}`") )
}
complete -F _packages_installed pkglist pkgpurge pkgremove debbugs debpackages

# Git completions
__git_complete_nodefault dotfiles _git
__git_complete_nodefault dt _git

_src_projects() {
  COMPREPLY=( $(compgen -W "`find ~/src -mindepth 1 -maxdepth 1 -name "${COMP_WORDS[COMP_CWORD]}*" -printf '%f '`") )
}
complete -F _src_projects src

_git_edit() {
  local cmdline="$COMP_LINE"
  local cmd="${cmdline%% *}"

  # expand aliases
  while [ "`type -t $cmd`" = "alias" ]; do
    cmdline=`alias $cmd | cut -d\' -f2`
    cmd="${cmdline%% *}"
  done

  local argument=`echo "$cmdline" | awk '{ print $2 }'`
  if [ "$cmd" = "src" -a -n "$argument" ]; then
    pushd ~/src/"$argument" >/dev/null
    local popd=1
  elif [ "$cmd" = "dotfiles" ]; then
    pushd ${DOTFILES:-~/.dotfiles} >/dev/null
    local popd=1
  fi

  if [ -z "$cur" ]; then
    COMPREPLY=( $(git-edit --complete) )
  else
    COMPREPLY=( $(compgen -o bashdefault -o default -- $cur) )
    if [ -z "$COMPREPLY" ]; then
      COMPREPLY=( $(git-edit --complete $cur) )
    fi
  fi

  [ -n "$popd" ] && popd >/dev/null
}

_ed() {
  cur=${COMP_WORDS[COMP_CWORD]}
  _git_edit
}

complete -F _ed ed
