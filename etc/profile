# /etc/profile: system-wide .profile file for the Bourne shell (sh(1))
# and Bourne compatible shells (bash(1), ksh(1), ash(1), ...).

if [ -f /etc/environment ]; then
  . /etc/environment
fi

[ -z "$BASH" ] && return
[ -n "$PS1" ] && shopt -q login_shell && BASH_INTERACTIVE=1

if [ "$BASH_INTERACTIVE" ]; then
  if [ "`uname -s`" = "Linux" ]; then
    if [ -z "$SSH_AUTH_SOCK" ]; then
      exec ssh-agent -- bash --login
    elif [ -z "$STY" -a -n "$SSH_CONNECTION" -a -x /usr/bin/screen ]; then
      exec screen -qRR
    fi
  fi

  if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# History settings
shopt -s histappend checkwinsize
export HISTSIZE=5000
export HISTFILESIZE=5000
export HISTCONTROL="ignoreboth"

# Prompt configuration
if [ "$SSH_CONNECTION" ] || [ "$SUDO_USER" ]; then
  export PS1='\u@\h:\w\$ '
else
  export PS1='\u@\h:\w\$ '
fi

# Use Git prompt if available
if type __git_ps1 &>/dev/null; then
  export GIT_PS1_SHOWDIRTYSTATE=1
  export GIT_PS1_SHOWSTASHSTATE=1
  export GIT_PS1_SHOWUNTRACKEDFILES=1

  export SUDO_PS1=$PS1
  export PS1=$PS1'$(__git_ps1 "[\[[1;32m\]%s\[[0m\]] ")'
fi

# Window titles
if [[ "$TERM" =~ ^(rxvt|xterm-256color) ]]; then
  if [ "$SSH_CONNECTION" ]; then
    export PROMPT_COMMAND='_pwd=${PWD/$HOME/\~}; echo -ne "]1;@$HOSTNAME:$_pwd\007]2;$USER@$HOSTNAME:$_pwd\007"'
  else
    export PROMPT_COMMAND='_pwd=${PWD/$HOME/\~}; echo -ne "]1;$_pwd\007]2;$_pwd\007"'
  fi
fi

# OS X specific configuration
if [ "`uname -s`" = "Darwin" ]; then
  if [ -x /usr/libexec/path_helper ]; then
    eval `/usr/libexec/path_helper -s`
  fi

  # Homebrew aliases
  . /usr/local/Cellar/coreutils/*/aliases
  alias find='gfind'
  alias sed='gsed'
  alias gvim='mvim'
  alias gvimdiff='mvimdiff'

  unalias [ echo false kill printf pwd test true
fi

# Aliases

# ls
which dircolors &>/dev/null && eval `dircolors -b`
alias ls='ls --color'
[ "`uname -s`" = "Darwin" ] && alias ls='gls --color'
alias ll='ls -lh'
alias l='ls -A'

# basic aliases
alias @='start'
alias ..='cd ..'
alias ...='cd ../..'
alias cd_='cd "$_"'
alias back='cd "$OLDPWD"'
alias cp='cp -v'
alias mv='mv -v'
alias rm='rm -v'
alias du='du -ch'
alias df='df -h'
alias ln='ln -svfi'
[ "`uname -s`" = "Darwin" ] && alias ln='gln -svfi'
alias rgrep='grep -r --exclude=.svn --exclude=.git --exclude=.*.swp'
alias cgrep='GREP_OPTIONS= grep'
alias mime='file -i'
alias killbg='kill -9 %1'

# debian aliases
alias pkget='aptitude -Z install'
alias pkgpurge='aptitude -Z purge'
alias pkgremove='aptitude -Z remove'
alias pkglist='dpkg -L'
alias pkgname='apt-cache pkgnames'
alias pkgsearch='apt-cache search'
function pkgwhich {
  dpkg -S `which "$1"`
}

# sudo aliases
if which sudo &>/dev/null; then
  # file management
  alias sucp='sudo cp -vi'
  alias sumv='sudo mv -vi'
  alias surm='sudo rm -v'
  alias suln='sudo ln -svfi'
  alias sush='sudo -i'
  alias suown='sudo chown -vR 0:0'
  alias sumod='sudo chmod -vR 644'

  # vim
  alias suvi='sudo vim'
  alias sugvi='sudo gvim'
  alias sudiff='sudo vimdiff'
  alias sugdiff='sudo gvimdiff'
  alias visudo='sudo visudo'

  # debian tools
  alias apt-get='sudo apt-get'
  alias aptitude='sudo aptitude'
  alias pkginstall='sudo dpkg -i'
  alias dpkg-reconfigure='sudo dpkg-reconfigure'
  alias update-alternatives='sudo update-alternatives'
  alias invoke-rc.d='sudo invoke-rc.d'
  alias update-rc.d='sudo update-rc.d'
  alias make-kpkg='sudo make-kpkg'

  # system tools
  alias init='sudo init'
  alias modprobe='sudo modprobe'
  alias rmmod='sudo rmmod'
  alias iptables='sudo iptables'
  alias ip6tables='sudo ip6tables'
  alias tcpdump='sudo tcpdump'
  alias ethtool='sudo ethtool'
  alias lsop='sudo lsof -ni | grep --color=never LISTEN | egrep --color=auto "^[^ ]+"'
  alias jnettop='sudo jnettop'
  alias ifconfig='sudo ifconfig'
  alias ifup='sudo ifup'
  alias ifdown='sudo ifdown'
  alias tcpkill='sudo tcpkill'
  alias fdisk='sudo fdisk'
  alias parted='sudo parted'
  alias lvm='sudo lvm'
fi

# program aliases
alias fortune='fortune -a'
alias tetris='tetris-bsd -p -l 5'
alias thesaurus='dict -d moby-thes'
alias pstree='pstree -GUh'
alias ftrace='strace -fe trace=file'
alias ptrace='strace -fe trace=process'
alias fetchmail='fetchmail -v'
alias wget='wget -c'
alias gvi='gvim'
alias gvi.add='gvim --remote-silent'
alias gcc='gcc -Wall'
alias sbcl='rlwrap sbcl'
alias ocaml='rlwrap ocaml'
alias gcc='gcc -Wall'
alias cadaver='EDITOR="gvim -f" cadaver'
alias psgrep='pgrep -fl'
alias dt='dotfiles'
which ack-grep &>/dev/null && alias ack='ack-grep'
which xdg-open &>/dev/null && alias open='xdg-open'

# SSH agent wrappers
if [ -n "$SSH_AUTH_SOCK" ]; then
  function __load_key {
    [ "`uname -s`" = "Darwin" ] && return
    local key=~/.ssh/id_rsa
    if [ -f "$key" ]; then
      ssh-add -l | grep -q "$key" || ssh-add "$key" </dev/null
    fi
  }

  function ssh {
    __load_key
    command ssh "$@"
  }

  function git {
    [[ "$@" =~ (pull|push|fetch|remote\ up|r\ up|reup) ]] && __load_key
    command git "$@"
  }
fi

# RubyGems wrapper
function gem {
  local gem="gem"
  [[ "$@" =~ (install) ]] && gem="sudo gem"
  command $gem "$@"
}

# GVim wrapper for SSH sessions
if [ -n "$SSH_CONNECTION" ]; then
  unalias gvi
  function gvi {
    local wait=1

    while true; do
      [ -n "$DISPLAY" -a -x /usr/bin/gvim ] || break

      if gvim --serverlist | grep -q .; then
        args=()
        options=
        for arg in "$@"; do
          if [ "${arg:0:1}" = "@" ]; then
            options="$options --servername ${arg:1}"
          else
            args=( "${args[@]}" "scp://$HOSTNAME/`readlink -f "$arg"`" )
          fi
        done
        pushd / >/dev/null
        gvim $options --remote "${args[@]}"
        popd >/dev/null
        return
      else
        [ $wait -eq 1 ] && echo "Waiting for GVim server..."
        wait=0
        sleep 1
      fi
    done

    vim "$@"
  }
fi

# MySQL aliases and functions
if which mysql >/dev/null; then
  alias mysql='mysql -u root'

  function mysql-ps {
    uptime
    sudo mysqladmin --defaults-file=/etc/mysql/debian.cnf status || return 1
    echo

    command="sudo mysql --defaults-file=/etc/mysql/debian.cnf -e 'SHOW FULL PROCESSLIST' -B | sort -k 5"
    if [ -n "$1" ]; then
      eval $command | egrep "$1"
    else
      eval $command | egrep -v "\sSleep\s"
    fi
  }

  function mysql-kill {
    sudo mysql --defaults-file=/etc/mysql/debian.cnf -e "KILL $1"
  }

  function mysql-top {
    watch -n 1 "bash -c '. /etc/profile; mysql-ps $1'";
  }
fi

# Mount a loopback device
function mount.loop {
  mount="/mnt/loop"
  [ -n "$2" ] && mount="$2"

  if [ ! -n "$1" ]; then
    echo "Usage: mount.loop IMAGE [MOUNTPOINT]"
    return 255
  elif [ ! -f "$1" ]; then
    echo "Image $1 not found."
    return 1
  elif mountpoint -q "$mount"; then
    echo "$mount is already mounted."
    return 1
  else
    sudo mount -v -o loop "$1" "$mount" | tail -1
  fi
}

# Show the login message
function .home {
  cd; down
  fortune
  echo; echo
  date "+%A, %e. %B %Y  %k:%M"
  echo; ls; echo
}

function down {
  local i
  for i in `seq 1 $(tput lines)`; do
    echo
  done
}


umask 022
