#!bash

# completion for git-edit subcommand
function _git_edit {
  # disable default completion for __git_complete
  compopt +o bashdefault +o default
  # disable default completion for __git_edit_complete
  unset __GIT_COMPLETE_DEFAULT

  # only run if the line has changed since the last completion
  if [ "$COMP_LINE" = "$__GIT_COMPLETE_LAST_LINE" ]; then
    return
  else
    __GIT_COMPLETE_LAST_LINE="$COMP_LINE"

    # clear the last line when the prompt is displayed
    if ! [[ "$PROMPT_COMMAND" =~ __GIT_COMPLETE_LAST_LINE ]]; then
      [ -n "$PROMPT_COMMAND" ] && PROMPT_COMMAND="$PROMPT_COMMAND;"
      PROMPT_COMMAND="$PROMPT_COMMAND unset __GIT_COMPLETE_LAST_LINE"
    fi
  fi

  # find the position of the edit command
  local edit_pos=0
  local pos

  for (( pos = 0; pos < ${#words[@]}; pos++ )); do
    local w=${words[pos]}
    if [ "$w" = "edit" -o "$w" = "ed" ]; then
      edit_pos=$pos
      break
    fi
  done

  # pass the previous pattern if a number is given
  if [ $cword -gt $((edit_pos + 1)) ] && [[ "$cur" =~ ^[0-9]+$ ]]; then
    local choice="$cur"
    local cur="$prev"
  else
    unset choice
  fi

  COMPREPLY=( "$( [ -n "$__GIT_COMPLETE_WORKDIR" ] && cd "$__GIT_COMPLETE_WORKDIR"; git-edit --complete "$cur" $choice )" )
}

# helper to generate completions inside the configured working directory
function __git_complete_in_workdir {
  COMPREPLY=( $( [ -n "$__GIT_COMPLETE_WORKDIR" ] && cd "$__GIT_COMPLETE_WORKDIR"; $@ ) )
}

# helper to add Git completions to a command
function __git_edit_complete {
  # first argument is the command that should be completed
  local command="$1"
  # second argument is the name of the Git completion function, same as for __git_complete
  local subcommand="${2:-_git}"
  # third argument, if given, will be used as the working directory to get the completions from
  local workdir="$3"

	local wrapper="__git_edit_wrap_${command}_${subcommand}"
	eval "$wrapper () { __git_edit_func_wrap $subcommand \"$workdir\" ; }"
	complete -o nospace -F $wrapper $command 2>/dev/null \
		|| complete -o nospace -F $wrapper $command
}

function __git_edit_func_wrap {
  local cur=${COMP_WORDS[COMP_CWORD]}

  __GIT_COMPLETE_DEFAULT=1
  __GIT_COMPLETE_WORKDIR="$2"

  __git_func_wrap $1

  if [ -z "$COMPREPLY" -a -n "$__GIT_COMPLETE_DEFAULT" ]; then
    [ -n "$__GIT_COMPLETE_WORKDIR" ] && pushd "$__GIT_COMPLETE_WORKDIR" >/dev/null
    _filedir
    [ -n "$__GIT_COMPLETE_WORKDIR" ] && popd >/dev/null
  fi

  unset __GIT_COMPLETE_WORKDIR __GIT_COMPLETE_DEFAULT
}

function _ed {
  __git_edit_func_wrap _git_edit
}
complete -o nospace -F _ed ed
